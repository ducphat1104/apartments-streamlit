# app.py
import streamlit as st
import pandas as pd
from joblib import load
import json
import datetime as dt

st.set_page_config(page_title="D·ª± ƒëo√°n gi√° thu√™ cƒÉn h·ªô", layout="wide")

# =========================
# N·∫°p m√¥ h√¨nh & metadata
# =========================
@st.cache_resource
def load_assets():
    rf = load("rf_pipeline.joblib")
    xgb = load("xgb_pipeline.joblib")
    with open("X_columns.json", "r", encoding="utf-8") as f:
        X_cols = json.load(f)
    return rf, xgb, X_cols

try:
    rf_model, xgb_model, X_COLUMNS = load_assets()
except Exception as e:
    st.error(f"Kh√¥ng n·∫°p ƒë∆∞·ª£c m√¥ h√¨nh/metadata: {e}")
    st.stop()

# =========================
# Danh s√°ch feature ti·ªán √≠ch & th√∫ c∆∞ng (key ph·∫£i tr√πng l√∫c train)
# =========================
amen_cols = [
    "amenities_Parking","amenities_Pool","amenities_Gym","amenities_Patio/Deck",
    "amenities_Washer Dryer","amenities_Storage","amenities_Clubhouse",
    "amenities_Dishwasher","amenities_AC","amenities_Refrigerator","amenities_Fireplace",
    "amenities_Cable or Satellite","amenities_Playground","amenities_Internet Access",
    "amenities_Wood Floors","amenities_Gated","amenities_Tennis","amenities_TV",
    "amenities_Elevator","amenities_Basketball","amenities_Hot Tub",
    "amenities_Garbage Disposal","amenities_View","amenities_Alarm",
    "amenities_Doorman","amenities_Luxury",
]
pet_cols = ["pets_allowed_Cats","pets_allowed_Dogs","pets_allowed_None"]

# Label ti·∫øng Vi·ªát cho ti·ªán √≠ch
AMEN_VN = {
    "amenities_Parking": "B√£i ƒë·ªó xe",
    "amenities_Pool": "H·ªì b∆°i",
    "amenities_Gym": "Ph√≤ng gym",
    "amenities_Patio/Deck": "S√¢n/Hi√™n",
    "amenities_Washer Dryer": "M√°y gi·∫∑t/s·∫•y",
    "amenities_Storage": "Kho ch·ª©a/Storage",
    "amenities_Clubhouse": "Nh√† CLB/Clubhouse",
    "amenities_Dishwasher": "M√°y r·ª≠a b√°t",
    "amenities_AC": "ƒêi·ªÅu ho√†",
    "amenities_Refrigerator": "T·ªß l·∫°nh",
    "amenities_Fireplace": "L√≤ s∆∞·ªüi",
    "amenities_Cable or Satellite": "Truy·ªÅn h√¨nh c√°p/v·ªá tinh",
    "amenities_Playground": "S√¢n ch∆°i",
    "amenities_Internet Access": "Internet",
    "amenities_Wood Floors": "S√†n g·ªó",
    "amenities_Gated": "Khu c√≥ c·ªïng",
    "amenities_Tennis": "S√¢n tennis",
    "amenities_TV": "TV",
    "amenities_Elevator": "Thang m√°y",
    "amenities_Basketball": "S√¢n b√≥ng r·ªï",
    "amenities_Hot Tub": "B·ªìn n∆∞·ªõc n√≥ng",
    "amenities_Garbage Disposal": "Nghi·ªÅn r√°c",
    "amenities_View": "View ƒë·∫πp",
    "amenities_Alarm": "B√°o ƒë·ªông",
    "amenities_Doorman": "B·∫£o v·ªá c·ª≠a/Doorman",
    "amenities_Luxury": "Cao c·∫•p/Luxury",
}
PET_VN = {
    "pets_allowed_Cats": "Cho nu√¥i m√®o",
    "pets_allowed_Dogs": "Cho nu√¥i ch√≥",
    "pets_allowed_None": "Kh√¥ng r√µ th√¥ng tin th√∫ c∆∞ng",
}

# =========================
# Sidebar
# =========================
st.sidebar.title("Tu·ª≥ ch·ªçn")
model_name = st.sidebar.selectbox("Ch·ªçn m√¥ h√¨nh", ["XGBoost (ƒë√£ tinh ch·ªânh)", "Random Forest (ƒë√£ tinh ch·ªânh)"])
model = xgb_model if "XGBoost" in model_name else rf_model

st.sidebar.write("üì¶ T√†i s·∫£n ƒë√£ n·∫°p:")
st.sidebar.code("rf_pipeline.joblib\nxgb_pipeline.joblib\nX_columns.json")

# =========================
# Ti√™u ƒë·ªÅ ch√≠nh
# =========================
st.title("D·ª± ƒëo√°n gi√° thu√™ cƒÉn h·ªô (USD / th√°ng)")
st.caption("Nh·∫≠p th√¥ng tin cƒÉn h·ªô, m√¥ h√¨nh s·∫Ω ∆∞·ªõc l∆∞·ª£ng gi√° thu√™ theo th√°ng.")

# =========================
# Khu nh·∫≠p li·ªáu
# =========================
col1, col2, col3 = st.columns(3)

with col1:
    bathrooms = st.number_input("S·ªë ph√≤ng t·∫Øm", min_value=1.0, max_value=3.0, value=2.0, step=0.5, format="%.1f")
    bedrooms  = st.number_input("S·ªë ph√≤ng ng·ªß",  min_value=1.0, max_value=4.0, value=2.0, step=1.0, format="%.0f")
    square_feet = st.number_input("Di·ªán t√≠ch (ft¬≤)", min_value=200, max_value=3000, value=900, step=25)

with col2:
    latitude  = st.number_input("Vƒ© ƒë·ªô",  min_value=26.0, max_value=48.0, value=37.2258, step=0.0001, format="%.4f")
    longitude = st.number_input("Kinh ƒë·ªô", min_value=-123.0, max_value=-70.0, value=-84.5623, step=0.0001, format="%.4f")
    today = dt.date(2019, 9, 18)  # kh·ªõp ph√¢n b·ªë ng√†y trong t·∫≠p train
    d = st.date_input("Ng√†y ƒëƒÉng tin", value=today)

with col3:
    fee = st.selectbox("Ph√≠ d·ªãch v·ª•", ["No", "Yes"])
    has_photo = st.selectbox("T√¨nh tr·∫°ng ·∫£nh", ["Yes", "Thumbnail", "No"])
    price_type = st.selectbox("ƒê∆°n v·ªã gi√°", ["Monthly", "Weekly", "Monthly|Weekly"])
    cityname = st.text_input("Th√†nh ph·ªë", value="Dallas")
    state = st.text_input("Bang (2 k√Ω t·ª±)", value="TX")
    source = st.text_input("Ngu·ªìn d·ªØ li·ªáu", value="RentDigs.com")

st.markdown("---")
st.subheader("Ti·ªán √≠ch & Th√∫ c∆∞ng")

cols = st.columns(4)
checks = {}
for i, key in enumerate(amen_cols):
    label = AMEN_VN.get(key, key.replace("amenities_", "Ti·ªán √≠ch: "))
    checks[key] = cols[i % 4].checkbox(label, value=False)

pet1, pet2, pet3 = st.columns(3)
checks["pets_allowed_Cats"] = pet1.checkbox(PET_VN["pets_allowed_Cats"], value=False)
checks["pets_allowed_Dogs"] = pet2.checkbox(PET_VN["pets_allowed_Dogs"], value=False)
checks["pets_allowed_None"] = pet3.checkbox(PET_VN["pets_allowed_None"], value=True)

st.markdown("---")

# =========================
# Build h√†ng input theo ƒë√∫ng schema X_COLUMNS
# =========================
def build_input_row():
    row = {}
    # default: numeric = 0, object = "Unknown"
    obj_cols = {"fee","has_photo","price_type","cityname","state","source"}
    for c in X_COLUMNS:
        row[c] = "Unknown" if c in obj_cols else 0

    # g√°n gi√° tr·ªã th·ª±c t·ª´ UI
    row["bathrooms"] = float(bathrooms)
    row["bedrooms"] = float(bedrooms)
    row["square_feet"] = float(square_feet)
    row["latitude"] = float(latitude)
    row["longitude"] = float(longitude)
    row["fee"] = fee
    row["has_photo"] = has_photo
    row["price_type"] = price_type
    row["cityname"] = cityname
    row["state"] = state
    row["source"] = source

    # t√°ch ng√†y th√†nh year/month/day (ƒë√£ d√πng l√∫c train)
    row["year"] = d.year
    row["month"] = d.month
    row["day"] = d.day

    # ti·ªán √≠ch & th√∫ c∆∞ng (0/1)
    for c in amen_cols + pet_cols:
        if c in X_COLUMNS:
            row[c] = 1 if checks.get(c, False) else 0

    # ƒë·∫£m b·∫£o ƒë√∫ng th·ª© t·ª± c·ªôt
    return pd.DataFrame([row], columns=X_COLUMNS)

# =========================
# D·ª± ƒëo√°n
# =========================
if st.button("D·ª± ƒëo√°n gi√° thu√™"):
    X_one = build_input_row()
    try:
        pred = model.predict(X_one)[0]
        st.success(f"üìà Gi√° thu√™ d·ª± ƒëo√°n: **${pred:,.0f} / th√°ng**  ({model_name})")
        with st.expander("Xem d·ªØ li·ªáu ƒë·∫ßu v√†o (ƒë√£ chu·∫©n ho√° schema)"):
            st.dataframe(X_one)
    except Exception as e:
        st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")

